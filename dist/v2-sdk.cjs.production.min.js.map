{"version":3,"file":"v2-sdk.cjs.production.min.js","sources":["../src/chains.ts","../src/constants.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts"],"sourcesContent":["/**\n * copy from https://github.com/Uniswap/sdk-core/blob/main/src/chains.ts\n */\n\nexport enum ChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n  SEPOLIA = 11155111,\n  OPTIMISM = 10,\n  OPTIMISM_GOERLI = 420,\n  OPTIMISM_SEPOLIA = 11155420,\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_GOERLI = 421613,\n  ARBITRUM_SEPOLIA = 421614,\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n  CELO = 42220,\n  CELO_ALFAJORES = 44787,\n  GNOSIS = 100,\n  MOONBEAM = 1284,\n  BNB = 56,\n  AVALANCHE = 43114,\n  BASE_GOERLI = 84531,\n  BASE = 8453,\n  ZORA = 7777777,\n  ZORA_SEPOLIA = 999999999,\n  ROOTSTOCK = 30,\n  BLAST = 81457,\n  BEVM = 11501,\n  BEVM_CANARY_TESTNET = 1502,\n  BITLAYER_TESTNET = 200810\n}\n\nexport const SUPPORTED_CHAINS = [\n  ChainId.MAINNET,\n  ChainId.OPTIMISM,\n  ChainId.OPTIMISM_GOERLI,\n  ChainId.OPTIMISM_SEPOLIA,\n  ChainId.ARBITRUM_ONE,\n  ChainId.ARBITRUM_GOERLI,\n  ChainId.ARBITRUM_SEPOLIA,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.GOERLI,\n  ChainId.SEPOLIA,\n  ChainId.CELO_ALFAJORES,\n  ChainId.CELO,\n  ChainId.BNB,\n  ChainId.AVALANCHE,\n  ChainId.BASE,\n  ChainId.BASE_GOERLI,\n  ChainId.ZORA,\n  ChainId.ZORA_SEPOLIA,\n  ChainId.ROOTSTOCK,\n  ChainId.BLAST,\n  ChainId.BEVM,\n  ChainId.BEVM_CANARY_TESTNET,\n  ChainId.BITLAYER_TESTNET\n] as const\nexport type SupportedChainsType = typeof SUPPORTED_CHAINS[number]\n\nexport enum NativeCurrencyName {\n  // Strings match input for CLI\n  ETHER = 'ETH',\n  MATIC = 'MATIC',\n  CELO = 'CELO',\n  GNOSIS = 'XDAI',\n  MOONBEAM = 'GLMR',\n  BNB = 'BNB',\n  AVAX = 'AVAX',\n  ROOTSTOCK = 'RBTC',\n  BTC = 'BTC'\n}\n","import JSBI from 'jsbi'\nimport { ChainId } from './chains'\n\n/**\n * @deprecated use FACTORY_ADDRESS_MAP instead\n */\nexport const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n\nexport const FACTORY_ADDRESS_MAP: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.GOERLI]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.SEPOLIA]: '0xB7f907f7A9eBC822a80BD25E224be42Ce0A698A0',\n  [ChainId.OPTIMISM]: '0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf',\n  [ChainId.ARBITRUM_ONE]: '0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9',\n  [ChainId.AVALANCHE]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.BASE]: '0x8909dc15e40173ff4699343b6eb8132c65e18ec6',\n  [ChainId.BNB]: '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6',\n  [ChainId.POLYGON]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.CELO]: '0x79a530c8e2fA8748B7B40dd3629C0520c2cCf03f',\n  [ChainId.BLAST]: '0x5C346464d33F90bABaf70dB6388507CC889C1070',\n\n  // bevmswap v1\n  [ChainId.BEVM]: '0xAdEFa8CFD0655e319559c482c1443Cc6fa804C1F',\n  [ChainId.BEVM_CANARY_TESTNET]: '0x1045D426488B359592864D3BDC3a64ebEBcDdf96',\n  [ChainId.BITLAYER_TESTNET]: '0x57e0e352a82928a28ce453d9a9fa005a9922aa49'\n}\n\n/**\n * default from uniswap\n */\nexport const INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n\nexport const INIT_CODE_HASH_MAP: { [chainId: number]: string } = {\n  // bevmswap v1\n  [ChainId.BEVM]: '0xa1d96c4e569a8fba6c4ad8d633250547339e9fb98e185d256480ed16c528c9e2',\n  [ChainId.BEVM_CANARY_TESTNET]: '0xa1d96c4e569a8fba6c4ad8d633250547339e9fb98e185d256480ed16c528c9e2',\n  [ChainId.BITLAYER_TESTNET]: '0xa1d96c4e569a8fba6c4ad8d633250547339e9fb98e185d256480ed16c528c9e2'\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n/**\n * default from uniswap\n */\nexport const TRADE_FEE = JSBI.BigInt(9970) // 0.3%\n\nexport const TRADE_FEE_MAP: { [chainId: number]: JSBI } = {\n  // bevmswap v1: 0.4%\n  [ChainId.BEVM]: JSBI.BigInt(9960),\n  [ChainId.BEVM_CANARY_TESTNET]: JSBI.BigInt(9960),\n  [ChainId.BITLAYER_TESTNET]: JSBI.BigInt(9960)\n}\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const FIVE = JSBI.BigInt(5)\nexport const _10000 = JSBI.BigInt(10000)\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { getCreate2Address } from '@ethersproject/address'\nimport { keccak256, pack } from '@ethersproject/solidity'\nimport { BigintIsh, CurrencyAmount, Price, sqrt, Token } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport {\n  _10000,\n  FACTORY_ADDRESS,\n  FACTORY_ADDRESS_MAP,\n  FIVE,\n  INIT_CODE_HASH,\n  INIT_CODE_HASH_MAP,\n  MINIMUM_LIQUIDITY,\n  ONE,\n  TRADE_FEE,\n  TRADE_FEE_MAP,\n  ZERO\n} from '../constants'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  const initCodeHash = INIT_CODE_HASH_MAP[tokenA.chainId] ?? INIT_CODE_HASH\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    initCodeHash\n  )\n}\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const factoryAddress = FACTORY_ADDRESS_MAP[tokenA.chainId] ?? FACTORY_ADDRESS\n    return computePairAddress({ factoryAddress, tokenA, tokenB })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>) {\n    const tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [currencyAmountA, tokenAmountB]\n      : [tokenAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].currency.chainId,\n      Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(\n      inputAmount.quotient,\n      TRADE_FEE_MAP[inputAmount.currency.chainId] ?? TRADE_FEE\n    )\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _10000), inputAmountWithFee)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _10000)\n    const denominator = JSBI.multiply(\n      JSBI.subtract(outputReserve.quotient, outputAmount.quotient),\n      TRADE_FEE_MAP[outputAmount.currency.chainId] ?? TRADE_FEE\n    )\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency, Price, Token } from '@uniswap/sdk-core'\n\nimport { Pair } from './pair'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import {\n  computePriceImpact,\n  Token,\n  Currency,\n  CurrencyAmount,\n  Fraction,\n  Percent,\n  Price,\n  sortedInsert,\n  TradeType\n} from '@uniswap/sdk-core'\nimport { ONE, ZERO } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport { Route } from './route'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\n        .quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import {\n  Currency,\n  CurrencyAmount,\n  Fraction,\n  Percent,\n  Token,\n  TradeType,\n  validateAndParseAddress\n} from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\nimport { ONE } from './constants'\nimport { Pair, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\nexport const quote = (amountA: Fraction, reserveA: Fraction, reserveB: Fraction): Fraction => {\n  return amountA.multiply(reserveA).divide(reserveB)\n}\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n\n  public static addCallParameters(\n    pair: Pair,\n    amount0: CurrencyAmount<Currency>,\n    amount1: CurrencyAmount<Currency>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const ether0 = amount0.currency.isNative\n    const ether1 = amount1.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(ether0 && ether1), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    // todo: invariant ETH and WETH\n\n    const to: string = validateAndParseAddress(options.recipient)\n\n    const slippageAdjusted = new Fraction(ONE).add(options.allowedSlippage).invert()\n    let amountADesired = amount0.quotient.toString()\n    let amountBDesired = amount1.quotient.toString()\n    let amountAMin = slippageAdjusted\n      .multiply(amountADesired)\n      .add(1)\n      .quotient.toString()\n    let amountBMin = slippageAdjusted\n      .multiply(amountBDesired)\n      .add(1)\n      .quotient.toString()\n\n    console.log('amountADesired:', amountADesired)\n    console.log('amountAMin    :', amountAMin)\n    console.log('amountBDesired:', amountBDesired)\n    console.log('amountBMin    :', amountBMin)\n\n    if (!(pair.reserve0.equalTo(0) && pair.reserve1.equalTo(0))) {\n      const amountBOptimal = quote(amount0, pair.reserve1, pair.reserve0).quotient.toString()\n      console.log('amountBOptimal:', amountBOptimal)\n      if (Number(amountBOptimal) <= Number(amountBDesired)) {\n        console.log('amountBOptimal <= amountBDesired')\n        if (Number(amountBOptimal) < Number(amountBMin)) {\n          // or throw error\n          console.log('amountBOptimal < amountBMin')\n          amountBDesired = amountBOptimal\n          amountBMin = slippageAdjusted\n            .multiply(amountBDesired)\n            .add(1)\n            .quotient.toString()\n        }\n      } else {\n        const amountAOptimal = quote(amount1, pair.reserve0, pair.reserve1).quotient.toString()\n        console.log('amountAOptimal:', amountAOptimal)\n        if (Number(amountAOptimal) <= Number(amountADesired)) {\n          console.log('amountAOptimal <= amountADesired')\n          if (Number(amountAOptimal) < Number(amountAMin)) {\n            // or throw error\n            console.log('amountAOptimal < amountAMin')\n            amountADesired = amountAOptimal\n            amountAMin = slippageAdjusted\n              .multiply(amountADesired)\n              .add(1)\n              .quotient.toString()\n          }\n        } else {\n          // todo: error?\n        }\n      }\n    }\n\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    if (ether0) {\n      methodName = 'addLiquidityETH'\n      args = [pair.token1.address, amountBDesired, amountBMin, amountAMin, to, deadline]\n      value = amountADesired\n    } else if (ether1) {\n      methodName = 'addLiquidityETH'\n      args = [pair.token0.address, amountADesired, amountAMin, amountBMin, to, deadline]\n      value = amountBDesired\n    } else {\n      methodName = 'addLiquidity'\n      args = [\n        pair.token0.address,\n        pair.token1.address,\n        amountADesired,\n        amountBDesired,\n        amountAMin,\n        amountBMin,\n        to,\n        deadline\n      ]\n      value = ZERO_HEX\n    }\n\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n\n  public static removeCallParameters(\n    pair: Pair,\n    token0: Currency,\n    token1: Currency,\n    totalSupply: string,\n    balance: string,\n    decreasePercent: number,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const ether0 = token0.isNative\n    const ether1 = token1.isNative\n    // the router does not support both ether in and out\n    invariant(!(ether0 && ether1), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    // todo: invariant ETH and WETH\n\n    const to: string = validateAndParseAddress(options.recipient)\n\n    const slippageAdjusted = new Fraction(ONE).add(options.allowedSlippage).invert()\n\n    const liquidity = new Fraction(balance).multiply(decreasePercent).divide(100)\n    const removePercent = liquidity.divide(totalSupply)\n    const amountAMin = pair.reserve0\n      .multiply(removePercent)\n      .multiply(slippageAdjusted)\n      .quotient.toString()\n    const amountBMin = pair.reserve1\n      .multiply(removePercent)\n      .multiply(slippageAdjusted)\n      .quotient.toString()\n\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    let methodName: string\n    let args: (string | string[])[]\n    if (ether0) {\n      methodName = 'removeLiquidityETH'\n      args = [pair.token1.address, liquidity.quotient.toString(), amountBMin, amountAMin, to, deadline]\n    } else if (ether1) {\n      methodName = 'removeLiquidityETH'\n      args = [pair.token0.address, liquidity.quotient.toString(), amountAMin, amountBMin, to, deadline]\n    } else {\n      methodName = 'removeLiquidity'\n      args = [\n        pair.token0.address,\n        pair.token1.address,\n        liquidity.quotient.toString(),\n        amountAMin,\n        amountBMin,\n        to,\n        deadline\n      ]\n    }\n\n    return {\n      methodName,\n      args,\n      value: ZERO_HEX\n    }\n  }\n}\n"],"names":["ChainId","NativeCurrencyName","SUPPORTED_CHAINS","MAINNET","OPTIMISM","OPTIMISM_GOERLI","OPTIMISM_SEPOLIA","ARBITRUM_ONE","ARBITRUM_GOERLI","ARBITRUM_SEPOLIA","POLYGON","POLYGON_MUMBAI","GOERLI","SEPOLIA","CELO_ALFAJORES","CELO","BNB","AVALANCHE","BASE","BASE_GOERLI","ZORA","ZORA_SEPOLIA","ROOTSTOCK","BLAST","BEVM","BEVM_CANARY_TESTNET","BITLAYER_TESTNET","FACTORY_ADDRESS_MAP","INIT_CODE_HASH","INIT_CODE_HASH_MAP","MINIMUM_LIQUIDITY","JSBI","BigInt","TRADE_FEE","TRADE_FEE_MAP","ZERO","ONE","FIVE","_10000","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","computePairAddress","factoryAddress","tokenA","tokenB","sortsBefore","initCodeHash","chainId","getCreate2Address","keccak256","pack","address","Pair","currencyAmountA","tokenAmountB","tokenAmounts","currency","liquidityToken","Token","getAddress","involvesToken","token","equals","this","token0","token1","priceOf","invariant","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","equal","quotient","inputReserve","outputReserve","inputAmountWithFee","multiply","numerator","denominator","add","outputAmount","CurrencyAmount","fromRawAmount","divide","subtract","getInputAmount","greaterThanOrEqual","getLiquidityMinted","totalSupply","tokenAmountA","liquidity","sqrt","amount0","amount1","lessThanOrEqual","greaterThan","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","result","Price","Route","pairs","input","output","length","every","pair","wrappedInput","wrapped","path","entries","currentInput","push","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","inputOutputComparator","a","b","equalTo","lessThan","tradeComparator","ioComp","priceImpact","route","Trade","amount","tradeType","Array","TradeType","EXACT_INPUT","i","fromFractionalAmount","executionPrice","computePriceImpact","midPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","nextAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","error","isInsufficientInputAmountError","sortedInsert","pairsExcludingThisPair","concat","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","nextAmountOut","tokenIn","isInsufficientReservesError","toHex","currencyAmount","toString","quote","amountA","reserveA","reserveB","Router","swapCallParameters","trade","options","etherIn","isNative","etherOut","ttl","methodName","args","value","to","validateAndParseAddress","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","addCallParameters","ether0","ether1","slippageAdjusted","amountADesired","amountBDesired","amountAMin","amountBMin","console","log","amountBOptimal","Number","amountAOptimal","removeCallParameters","balance","decreasePercent","removePercent"],"mappings":"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"}